<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DevLib.Data</name>
    </assembly>
    <members>
        <member name="T:DevLib.Data.AutoIncrementId">
            <summary>
            Class AutoIncrementId.
            </summary>
        </member>
        <member name="F:DevLib.Data.AutoIncrementId._nextId">
            <summary>
            The next identifier.
            </summary>
        </member>
        <member name="M:DevLib.Data.AutoIncrementId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.AutoIncrementId"/> class.
            </summary>
        </member>
        <member name="M:DevLib.Data.AutoIncrementId.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.AutoIncrementId"/> class.
            </summary>
            <param name="seed">The starting or seed value.</param>
            <param name="step">The increment value.</param>
        </member>
        <member name="P:DevLib.Data.AutoIncrementId.Seed">
            <summary>
            Gets the seed.
            </summary>
        </member>
        <member name="P:DevLib.Data.AutoIncrementId.Step">
            <summary>
            Gets or sets the increment step value.
            </summary>
        </member>
        <member name="M:DevLib.Data.AutoIncrementId.Next">
            <summary>
            Gets the next increment Id.
            </summary>
            <returns>The increment Id.</returns>
        </member>
        <member name="M:DevLib.Data.AutoIncrementId.Peek">
            <summary>
            Gets the last increment Id.
            </summary>
            <returns>The last Id.</returns>
        </member>
        <member name="T:DevLib.Data.DbProvider">
            <summary>
            DbProvider enum.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.SqlServer">
            <summary>
            Represents SQL Server.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.SqlServerCE">
            <summary>
            Represents SQL Server CE.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.MySQL">
            <summary>
            Represents My SQL.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.SQLite">
            <summary>
            Represents SQLite.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.OleDB">
            <summary>
            Represents Ole DB.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.ODBC">
            <summary>
            Represents ODBC.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.Oracle">
            <summary>
            Represents Oracle.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.PostgreSQL">
            <summary>
            Represents PostgreSQL.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbProvider.DB2">
            <summary>
            Represents DB2.
            </summary>
        </member>
        <member name="T:DevLib.Data.GuidGenerator">
            <summary>
            The utility class that generates unique identifiers.
            </summary>
        </member>
        <member name="F:DevLib.Data.GuidGenerator.TicksFactor">
            <summary>
            The ticks factor.
            </summary>
        </member>
        <member name="F:DevLib.Data.GuidGenerator.RandomGenerator">
            <summary>
            Provides cryptographically strong random data for GUID creation.
            </summary>
        </member>
        <member name="T:DevLib.Data.GuidGenerator.SequentialGuidType">
            <summary>
            Describes the type of a sequential GUID value.
            </summary>
        </member>
        <member name="F:DevLib.Data.GuidGenerator.SequentialGuidType.SequentialAsString">
            <summary>
            The GUID should be sequential when formatted using the <see cref="M:System.Guid.ToString" /> method.
            </summary>
        </member>
        <member name="F:DevLib.Data.GuidGenerator.SequentialGuidType.SequentialAsBinary">
            <summary>
            The GUID should be sequential when formatted using the <see cref="M:System.Guid.ToByteArray" /> method.
            </summary>
        </member>
        <member name="F:DevLib.Data.GuidGenerator.SequentialGuidType.SequentialAtEnd">
            <summary>
            The sequential portion of the GUID should be located at the end of the Data4 block.
            </summary>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.Md5HashGuid(System.String)">
            <summary>
            Generates a new GUID value from given string MD5 hash.
            </summary>
            <param name="value">The given string.</param>
            <returns>Deterministic Guid instance.</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.NewGuidSequentialString">
            <summary>
            Generates a new GUID value which is sequentially ordered when formatted as a string.
            Optimize for: MySQL - char(36); PostgreSQL - uuid;
            </summary>
            <returns>New sequential string Guid instance.</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.NewGuidSequentialBinary">
            <summary>
            Generates a new GUID value which is sequentially ordered when formatted as a byte array.
            Optimize for: Oracle - raw(16);
            </summary>
            <returns>New sequential binary Guid instance.</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.NewGuidSequentialAtEnd">
            <summary>
            Generates a new GUID value which is sequentially ordered by the least significant six bytes of the Data4 block.
            Optimize for: SQL Server - uniqueidentifier;
            </summary>
            <returns>New sequential at end Guid instance.</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.GetTimestampFromGuidSequentialString(System.Guid)">
            <summary>
            Gets the DateTime from sequential string GUID.
            </summary>
            <param name="guid">The GUID sequential string.</param>
            <returns> DateTime object expressed as the Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.GetTimestampFromGuidSequentialBinary(System.Guid)">
            <summary>
            Gets the DateTime from sequential binary GUID.
            </summary>
            <param name="guid">The GUID sequential binary.</param>
            <returns> DateTime object expressed as the Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.GetTimestampFromGuidSequentialAtEnd(System.Guid)">
            <summary>
            Gets the DateTime from sequential at end GUID.
            </summary>
            <param name="guid">The GUID sequential at end.</param>
            <returns> DateTime object expressed as the Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.NewSequentialGuid(DevLib.Data.GuidGenerator.SequentialGuidType)">
            <summary>
            Generates a new GUID value which is sequentially ordered when formatted as a string, a byte array, or ordered by the least significant six bytes of the Data4 block, as specified by <paramref name="guidType" />.
            </summary>
            <param name="guidType">Specifies the type of sequential GUID (i.e. whether sequential as a string, as a byte array, or according to the Data4 block). This can affect performance under various database types.</param>
            <returns>A <see cref="T:System.Guid" /> structure whose value is created by replacing certain randomly-generated bytes with a sequential timestamp.</returns>
        </member>
        <member name="M:DevLib.Data.GuidGenerator.GetTimestampFromGuid(System.Guid,DevLib.Data.GuidGenerator.SequentialGuidType)">
            <summary>
            Gets the DateTime from sequential GUID.
            </summary>
            <param name="guid">The GUID.</param>
            <param name="guidType">Specifies the type of sequential GUID (i.e. whether sequential as a string, as a byte array, or according to the Data4 block). This can affect performance under various database types.</param>
            <returns> DateTime object expressed as the Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="T:DevLib.Data.InternalLogger">
            <summary>
            Internal logger.
            </summary>
        </member>
        <member name="F:DevLib.Data.InternalLogger.ExecutingAssembly">
            <summary>
            Field ExecutingAssembly.
            </summary>
        </member>
        <member name="F:DevLib.Data.InternalLogger.GlobalDebugFlagFile">
            <summary>
            Field GlobalDebugFlagFile.
            </summary>
        </member>
        <member name="F:DevLib.Data.InternalLogger.DebugFlagFile">
            <summary>
            Field DebugFlagFile.
            </summary>
        </member>
        <member name="F:DevLib.Data.InternalLogger.LogFile">
            <summary>
            Field LogFile.
            </summary>
        </member>
        <member name="F:DevLib.Data.InternalLogger.LogFileBackup">
            <summary>
            Field LogFileBackup.
            </summary>
        </member>
        <member name="F:DevLib.Data.InternalLogger.SyncRoot">
            <summary>
            Field SyncRoot.
            </summary>
        </member>
        <member name="M:DevLib.Data.InternalLogger.Log(System.Object[])">
            <summary>
            Method Log.
            </summary>
            <param name="objs">Diagnostic messages or objects to log.</param>
        </member>
        <member name="M:DevLib.Data.InternalLogger.GetStackFrameInfo(System.Int32)">
            <summary>
            Builds a readable representation of the stack trace.
            </summary>
            <param name="skipFrames">The number of frames up the stack to skip.</param>
            <returns>A readable representation of the stack trace.</returns>
        </member>
        <member name="M:DevLib.Data.InternalLogger.RenderLog(System.Object[])">
            <summary>
            Render parameters into a string.
            </summary>
            <param name="objs">Diagnostic messages or objects to log.</param>
            <returns>The rendered layout string.</returns>
        </member>
        <member name="M:DevLib.Data.InternalLogger.AppendToFile(System.String)">
            <summary>
            Append log message to the file.
            </summary>
            <param name="message">Log message to append.</param>
        </member>
        <member name="T:DevLib.Data.Repository.BinaryFileRepository`1">
            <summary>
            Binary file repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:DevLib.Data.Repository.BinaryFileRepository`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.Repository.BinaryFileRepository`1" /> class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="T:DevLib.Data.Repository.FileBaseRepository`1">
            <summary>
            File base repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="F:DevLib.Data.Repository.FileBaseRepository`1._fileMutex">
            <summary>
            Field _fileMutex.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.FileBaseRepository`1._file">
            <summary>
            Field _file.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.FileBaseRepository`1._readFileFunc">
            <summary>
            Field _readFileFunc.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.FileBaseRepository`1._writeFileAction">
            <summary>
            Field _writeFileAction.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.FileBaseRepository`1._disposed">
            <summary>
            Field _disposed.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.#ctor(System.String,System.Converter{System.String,System.Collections.Generic.List{`0}},DevLib.Data.Repository.WriteFileAction{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.Repository.FileBaseRepository`1" /> class.
            </summary>
            <param name="filename">The filename.</param>
            <param name="readFileFunc">The read file function.</param>
            <param name="writeFileAction">The write file action.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:DevLib.Data.Repository.FileBaseRepository`1" /> class.
            </summary>
        </member>
        <member name="P:DevLib.Data.Repository.FileBaseRepository`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetIndex(System.Int32)">
            <summary>
            Gets the entity at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetIndexAndRemove(System.Int32)">
            <summary>
            Gets the entity at the specified index, and removes the element at the specified index of the repository.
            </summary>
            <param name="index">The zero-based index of the element to get and remove.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetLastIndex(System.Int32)">
            <summary>
            Gets the entity at the specified last index.
            </summary>
            <param name="index">The last index.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetLastIndexAndRemove(System.Int32)">
            <summary>
            Gets the entity at the specified last index, and removes the element at the specified last index of the repository.
            </summary>
            <param name="index">The zero-based last index of the element to get and remove.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.SetIndex(System.Int32,`0)">
            <summary>
            Sets the entity at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The entity instance.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.SetLastIndex(System.Int32,`0)">
            <summary>
            Sets the entity at the specified last index.
            </summary>
            <param name="index">The last index.</param>
            <param name="item">The entity instance.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Count">
            <summary>
            Gets the number of entities contained in the repository.
            </summary>
            <returns>The number of entities contained in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Clear">
            <summary>
            Removes all elements from the repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Drop">
            <summary>
            Destroys the repository.
            </summary>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Add(`0)">
            <summary>
            Adds an object to the end of the repository.
            </summary>
            <param name="item">The object to be added to the end of the repository. The value can be null for reference types.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the repository.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the repository. The collection itself cannot be null, but it can contain elements that are null, if type TEntity is a reference type.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.AddOrUpdate``1(`0,System.Converter{`0,``0})">
            <summary>
            Inserts entity to the repository if the primary key does not already exist, or update entity in the repository if the primary key already exists.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.AddOrUpdate``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Inserts entities to the repository if the primary key does not already exist, or update entities in the repository if the primary key already exists.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The entities collection.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Update``1(`0,System.Converter{`0,``0})">
            <summary>
            Updates entity in the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Update``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Updates entities in the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The entities collection.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the repository at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the repository at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the repository. The collection itself cannot be null, but it can contain elements that are null, if type TEntity is a reference type.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList{T}" /> wrapper for the current collection.
            </summary>
            <returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection{T}" /> that acts as a read-only wrapper around the current repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetAll">
            <summary>
            Gets all entities from the repository.
            </summary>
            <returns>List of entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetRangeAndRemove(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository, and removes them from the repository.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetLastRange(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository of last index and count.
            </summary>
            <param name="index">The zero-based last index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.GetLastRangeAndRemove(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository of last index and count, and removes them from the repository.
            </summary>
            <param name="index">The zero-based last index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current repository to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="converter">A <see cref="T:System.Converter{T, TOutput}" /> delegate that converts each element from one type to another type.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{TOutput}" /> of the target type containing the converted elements from the current repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.CopyTo(`0[])">
            <summary>
            Copies the entire repository to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire repository to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the repository to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source repository at which copying begins.</param>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.ToArray">
            <summary>
            Copies the elements of the repository to a new array.
            </summary>
            <returns>An array containing copies of the elements of the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.BinarySearch(`0)">
            <summary>
            Searches the entire repository for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire repository for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements.-or-null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the repository for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Contains(`0)">
            <summary>
            Determines whether an element is in the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is found in the repository; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the repository contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the repository contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindAndRemove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the repository, and removes it from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{T}" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List{T}" />.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindAllAndRemove(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate, and removes them all from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{T}" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List{T}" />.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the repository that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the repository that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindLastAndRemove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the repository, and removes it from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the repository that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the repository that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the repository, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the repository that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the repository that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the repository that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the repository that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the repository, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the repository that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the repository that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the repository that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the repository that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the repository.
            </summary>
            <param name="item">The object to remove from the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Remove(System.Predicate{`0})">
            <summary>
            Removes the first element that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of a specific object from the repository.
            </summary>
            <param name="item">The object to remove from the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveLast(System.Predicate{`0})">
            <summary>
            Removes the last occurrence element that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>true if item successfully removed; otherwise, false. This method also returns false if item was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the repository.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveLastAt(System.Int32)">
            <summary>
            Removes the element at the specified last index of the repository.
            </summary>
            <param name="index">The zero-based last index of the element to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveLastRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <param name="index">The zero-based last starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.RemoveRange``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The collection whose elements should be removed from the repository.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Reverse">
            <summary>
            Reverses the order of the elements in the repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Sort">
            <summary>
            Sorts the elements in the repository using the default comparer.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the repository using the specified comparer.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in the repository using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the repository using the specified <see cref="T:System.Comparison{T}" />.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the repository.
            </summary>
            <param name="action">The <see cref="T:System.Action{T}" /> delegate to perform on each element of the repository.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the repository matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the repository matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.ActionOnRepository(System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            Calls action on the repository.
            </summary>
            <param name="action">The action.</param>
            <param name="submitChanges">true to submit changes of the repository; otherwise, false.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.FuncOnRepository``1(System.Converter{System.Collections.Generic.List{`0},``0},System.Boolean)">
            <summary>
            Calls function on the repository.
            </summary>
            <typeparam name="TResult">The type of return value.</typeparam>
            <param name="func">The function.</param>
            <param name="submitChanges">true to submit changes of the repository; otherwise, false.</param>
            <returns>Result of the function.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:DevLib.Data.Repository.FileBaseRepository`1" /> class.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:DevLib.Data.Repository.FileBaseRepository`1" /> class.
            protected virtual for non-sealed class; private for sealed class.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DevLib.Data.Repository.FileBaseRepository`1.CheckDisposed">
            <summary>
            Method CheckDisposed.
            </summary>
        </member>
        <member name="T:DevLib.Data.Repository.IRepository`1">
            <summary>
            Generic repository interface for reading and writing domain entities to a storage.
            </summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="P:DevLib.Data.Repository.IRepository`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetIndex(System.Int32)">
            <summary>
            Gets the entity at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetIndexAndRemove(System.Int32)">
            <summary>
            Gets the entity at the specified index, and removes the element at the specified index of the repository.
            </summary>
            <param name="index">The zero-based index of the element to get and remove.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetLastIndex(System.Int32)">
            <summary>
            Gets the entity at the specified last index.
            </summary>
            <param name="index">The last index.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetLastIndexAndRemove(System.Int32)">
            <summary>
            Gets the entity at the specified last index, and removes the element at the specified last index of the repository.
            </summary>
            <param name="index">The zero-based last index of the element to get and remove.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.SetIndex(System.Int32,`0)">
            <summary>
            Sets the entity at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The entity instance.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.SetLastIndex(System.Int32,`0)">
            <summary>
            Sets the entity at the specified last index.
            </summary>
            <param name="index">The last index.</param>
            <param name="item">The entity instance.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Count">
            <summary>
            Gets the number of entities contained in the repository.
            </summary>
            <returns>The number of entities contained in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Clear">
            <summary>
            Removes all elements from the repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Drop">
            <summary>
            Destroys the repository.
            </summary>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Add(`0)">
            <summary>
            Adds an object to the end of the repository.
            </summary>
            <param name="item">The object to be added to the end of the repository. The value can be null for reference types.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the repository.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the repository. The collection itself cannot be null, but it can contain elements that are null, if type TEntity is a reference type.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.AddOrUpdate``1(`0,System.Converter{`0,``0})">
            <summary>
            Inserts entity to the repository if the primary key does not already exist, or update entity in the repository if the primary key already exists.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.AddOrUpdate``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Inserts entities to the repository if the primary key does not already exist, or update entities in the repository if the primary key already exists.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The entities collection.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Update``1(`0,System.Converter{`0,``0})">
            <summary>
            Updates entity in the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Update``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Updates entities in the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The entities collection.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the repository at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the repository at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the repository. The collection itself cannot be null, but it can contain elements that are null, if type TEntity is a reference type.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList{T}" /> wrapper for the current collection.
            </summary>
            <returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection{T}" /> that acts as a read-only wrapper around the current repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetAll">
            <summary>
            Gets all entities from the repository.
            </summary>
            <returns>List of entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetRangeAndRemove(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository, and removes them from the repository.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetLastRange(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository of last index and count.
            </summary>
            <param name="index">The zero-based last index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.GetLastRangeAndRemove(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository of last index and count, and removes them from the repository.
            </summary>
            <param name="index">The zero-based last index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current repository to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="converter">A <see cref="T:System.Converter{T, TOutput}" /> delegate that converts each element from one type to another type.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{TOutput}" /> of the target type containing the converted elements from the current repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.CopyTo(`0[])">
            <summary>
            Copies the entire repository to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire repository to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the repository to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source repository at which copying begins.</param>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.ToArray">
            <summary>
            Copies the elements of the repository to a new array.
            </summary>
            <returns>An array containing copies of the elements of the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.BinarySearch(`0)">
            <summary>
            Searches the entire repository for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire repository for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements.-or-null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the repository for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Contains(`0)">
            <summary>
            Determines whether an element is in the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is found in the repository; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the repository contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the repository contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindAndRemove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the repository, and removes it from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{T}" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List{T}" />.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindAllAndRemove(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate, and removes them all from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{T}" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List{T}" />.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the repository that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the repository that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindLastAndRemove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the repository, and removes it from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the repository that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the repository that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the repository, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the repository that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the repository that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the repository that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the repository that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the repository, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the repository that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the repository that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the repository that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the repository that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the repository.
            </summary>
            <param name="item">The object to remove from the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Remove(System.Predicate{`0})">
            <summary>
            Removes the first element that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>true if item successfully removed; otherwise, false. This method also returns false if item was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of a specific object from the repository.
            </summary>
            <param name="item">The object to remove from the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveLast(System.Predicate{`0})">
            <summary>
            Removes the last occurrence element that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>true if item successfully removed; otherwise, false. This method also returns false if item was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the repository.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveLastAt(System.Int32)">
            <summary>
            Removes the element at the specified last index of the repository.
            </summary>
            <param name="index">The zero-based last index of the element to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveLastRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <param name="index">The zero-based last starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.RemoveRange``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The collection whose elements should be removed from the repository.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Reverse">
            <summary>
            Reverses the order of the elements in the repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Sort">
            <summary>
            Sorts the elements in the repository using the default comparer.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the repository using the specified comparer.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in the repository using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the repository using the specified <see cref="T:System.Comparison{T}" />.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the repository.
            </summary>
            <param name="action">The <see cref="T:System.Action{T}" /> delegate to perform on each element of the repository.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the repository matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the repository matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.ActionOnRepository(System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            Calls action on the repository.
            </summary>
            <param name="action">The action.</param>
            <param name="submitChanges">true to submit changes of the repository; otherwise, false.</param>
        </member>
        <member name="M:DevLib.Data.Repository.IRepository`1.FuncOnRepository``1(System.Converter{System.Collections.Generic.List{`0},``0},System.Boolean)">
            <summary>
            Calls function on the repository.
            </summary>
            <typeparam name="TResult">The type of return value.</typeparam>
            <param name="func">The function.</param>
            <param name="submitChanges">true to submit changes of the repository; otherwise, false.</param>
            <returns>Result of the function.</returns>
        </member>
        <member name="T:DevLib.Data.Repository.MemoryRepository`1">
            <summary>
            Memory repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="F:DevLib.Data.Repository.MemoryRepository`1._syncRoot">
            <summary>
            Field _syncRoot.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.MemoryRepository`1._disposed">
            <summary>
            Field _disposed.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.MemoryRepository`1._repository">
            <summary>
            Field _repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.Repository.MemoryRepository`1"/> class.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:DevLib.Data.Repository.MemoryRepository`1" /> class.
            </summary>
        </member>
        <member name="P:DevLib.Data.Repository.MemoryRepository`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetIndex(System.Int32)">
            <summary>
            Gets the entity at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetIndexAndRemove(System.Int32)">
            <summary>
            Gets the entity at the specified index, and removes the element at the specified index of the repository.
            </summary>
            <param name="index">The zero-based index of the element to get and remove.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetLastIndex(System.Int32)">
            <summary>
            Gets the entity at the specified last index.
            </summary>
            <param name="index">The last index.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetLastIndexAndRemove(System.Int32)">
            <summary>
            Gets the entity at the specified last index, and removes the element at the specified last index of the repository.
            </summary>
            <param name="index">The zero-based last index of the element to get and remove.</param>
            <returns>Entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.SetIndex(System.Int32,`0)">
            <summary>
            Sets the entity at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The entity instance.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.SetLastIndex(System.Int32,`0)">
            <summary>
            Sets the entity at the specified last index.
            </summary>
            <param name="index">The last index.</param>
            <param name="item">The entity instance.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Count">
            <summary>
            Gets the number of entities contained in the repository.
            </summary>
            <returns>The number of entities contained in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Clear">
            <summary>
            Removes all elements from the repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Drop">
            <summary>
            Destroys the repository.
            </summary>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Add(`0)">
            <summary>
            Adds an object to the end of the repository.
            </summary>
            <param name="item">The object to be added to the end of the repository. The value can be null for reference types.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the repository.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the repository. The collection itself cannot be null, but it can contain elements that are null, if type TEntity is a reference type.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.AddOrUpdate``1(`0,System.Converter{`0,``0})">
            <summary>
            Inserts entity to the repository if the primary key does not already exist, or update entity in the repository if the primary key already exists.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.AddOrUpdate``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Inserts entities to the repository if the primary key does not already exist, or update entities in the repository if the primary key already exists.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The entities collection.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Update``1(`0,System.Converter{`0,``0})">
            <summary>
            Updates entity in the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="entity">Entity instance.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Update``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Updates entities in the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The entities collection.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the repository at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the repository at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the repository. The collection itself cannot be null, but it can contain elements that are null, if type TEntity is a reference type.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.AsReadOnly">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList{T}" /> wrapper for the current collection.
            </summary>
            <returns><see cref="T:System.Collections.ObjectModel.ReadOnlyCollection{T}" /> that acts as a read-only wrapper around the current repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetAll">
            <summary>
            Gets all entities from the repository.
            </summary>
            <returns>List of entity instance.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetRangeAndRemove(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository, and removes them from the repository.
            </summary>
            <param name="index">The zero-based index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetLastRange(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository of last index and count.
            </summary>
            <param name="index">The zero-based last index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.GetLastRangeAndRemove(System.Int32,System.Int32)">
            <summary>
            Creates a copy of a range of elements in the source repository of last index and count, and removes them from the repository.
            </summary>
            <param name="index">The zero-based last index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A copy of a range of elements in the source repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Converts the elements in the current repository to another type, and returns a list containing the converted elements.
            </summary>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="converter">A <see cref="T:System.Converter{T, TOutput}" /> delegate that converts each element from one type to another type.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{TOutput}" /> of the target type containing the converted elements from the current repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.CopyTo(`0[])">
            <summary>
            Copies the entire repository to a compatible one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire repository to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the repository to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source repository at which copying begins.</param>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the repository. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.ToArray">
            <summary>
            Copies the elements of the repository to a new array.
            </summary>
            <returns>An array containing copies of the elements of the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.BinarySearch(`0)">
            <summary>
            Searches the entire repository for an element using the default comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire repository for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements.-or-null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches a range of elements in the repository for an element using the specified comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be null for reference types.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
            <returns>The zero-based index of <paramref name="item" /> in the repository, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of the repository count.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Contains(`0)">
            <summary>
            Determines whether an element is in the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is found in the repository; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the repository contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the repository contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindAndRemove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the repository, and removes it from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{T}" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List{T}" />.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindAllAndRemove(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate, and removes them all from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.List{T}" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List{T}" />.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the repository that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the repository that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindLastAndRemove(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the repository, and removes it from the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type TEntity.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the repository.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the repository that extends from the first element to the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the repository that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the repository, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the repository that extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the repository that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the repository that starts at the specified index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the repository that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the repository.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the repository, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the repository that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the repository that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the repository that contains the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the repository. The value can be null for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the repository that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the repository.
            </summary>
            <param name="item">The object to remove from the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Remove(System.Predicate{`0})">
            <summary>
            Removes the first element that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveLast(`0)">
            <summary>
            Removes the last occurrence of a specific object from the repository.
            </summary>
            <param name="item">The object to remove from the repository. The value can be null for reference types.</param>
            <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveLast(System.Predicate{`0})">
            <summary>
            Removes the last occurrence element that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>true if item successfully removed; otherwise, false. This method also returns false if item was not found in the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the repository.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the repository.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveLastAt(System.Int32)">
            <summary>
            Removes the element at the specified last index of the repository.
            </summary>
            <param name="index">The zero-based last index of the element to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveLastRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <param name="index">The zero-based last starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.RemoveRange``1(System.Collections.Generic.IEnumerable{`0},System.Converter{`0,``0})">
            <summary>
            Removes a range of elements from the repository.
            </summary>
            <typeparam name="TPrimaryKey">The type of the primary key.</typeparam>
            <param name="collection">The collection whose elements should be removed from the repository.</param>
            <param name="getPrimaryKey">The get primary key function.</param>
            <returns>true if succeeded; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Reverse">
            <summary>
            Reverses the order of the elements in the repository.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Sort">
            <summary>
            Sorts the elements in the repository using the default comparer.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the repository using the specified comparer.
            </summary>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in the repository using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer{T}" /> implementation to use when comparing elements, or null to use the default comparer <see cref="P:System.Collections.Generic.Comparer{T}.Default" />.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the repository using the specified <see cref="T:System.Comparison{T}" />.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the repository.
            </summary>
            <param name="action">The <see cref="T:System.Action{T}" /> delegate to perform on each element of the repository.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the repository matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The <see cref="T:System.Predicate{T}" /> delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the repository matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.ActionOnRepository(System.Action{System.Collections.Generic.List{`0}},System.Boolean)">
            <summary>
            Calls action on the repository.
            </summary>
            <param name="action">The action.</param>
            <param name="submitChanges">true to submit changes of the repository; otherwise, false.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.FuncOnRepository``1(System.Converter{System.Collections.Generic.List{`0},``0},System.Boolean)">
            <summary>
            Calls function on the repository.
            </summary>
            <typeparam name="TResult">The type of return value.</typeparam>
            <param name="func">The function.</param>
            <param name="submitChanges">true to submit changes of the repository; otherwise, false.</param>
            <returns>Result of the function.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:DevLib.Data.Repository.MemoryRepository`1" /> class.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:DevLib.Data.Repository.MemoryRepository`1" /> class.
            protected virtual for non-sealed class; private for sealed class.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:DevLib.Data.Repository.MemoryRepository`1.CheckDisposed">
            <summary>
            Method CheckDisposed.
            </summary>
        </member>
        <member name="T:DevLib.Data.Repository.WriteFileAction`2">
            <summary>
            Encapsulates a method that writes the repository to a file.
            </summary>
            <typeparam name="TString">String type.</typeparam>
            <typeparam name="TObject">The repository type.</typeparam>
            <param name="filename">The filename.</param>
            <param name="source">The repository source.</param>
        </member>
        <member name="T:DevLib.Data.Repository.RepositoryHelper">
            <summary>
            Repository helper.
            </summary>
        </member>
        <member name="F:DevLib.Data.Repository.RepositoryHelper.SharedMutexFileNamePrefix">
            <summary>
            Field SharedMutexFileNamePrefix.
            </summary>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.CreateSharedMutex(System.String)">
            <summary>
            Create a global shared mutex.
            </summary>
            <param name="mutexName">The mutex name.</param>
            <returns>Instance of Mutex.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.GetSharedFileMutexName(System.String)">
            <summary>
            Get a global shared mutex name according to file name.
            </summary>
            <param name="filename">File name.</param>
            <returns>Mutex name.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.IsEnumerableNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified enumerable instance is null or empty.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The System.Collections.Generic.IEnumerable{T} to check for emptiness.</param>
            <returns>true if the instance is null or empty; otherwise, false.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an System.Int64 that represents the total number of elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An System.Collections.Generic.IEnumerable{T} that contains the elements to be counted.</param>
            <returns>The number of elements in the source sequence.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.ReadXml``1(System.String)">
            <summary>
            Deserializes Xml string to object, read from file.
            </summary>
            <typeparam name="T">Type of the returns object.</typeparam>
            <param name="filename">File name.</param>
            <returns>Instance of T.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.WriteXml(System.String,System.Object,System.Boolean)">
            <summary>
            Serializes object to Xml string, write to file.
            </summary>
            <remarks>
            The object to be serialized should be decorated with the <see cref="T:System.SerializableAttribute"/>, or implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
            <param name="filename">File name.</param>
            <param name="source">The object to serialize.</param>
            <param name="removeDefaultNamespace">Whether to write default namespace.</param>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.ReadBinary``1(System.String)">
            <summary>
            Deserializes bytes to object, read from file.
            </summary>
            <typeparam name="T">The type of returns object.</typeparam>
            <param name="filename">File name.</param>
            <returns>Instance of T.</returns>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.WriteBinary(System.String,System.Object)">
            <summary>
            Serializes object to bytes, write to file.
            </summary>
            <param name="filename">File name.</param>
            <param name="source">Source object.</param>
        </member>
        <member name="M:DevLib.Data.Repository.RepositoryHelper.CloneDeep``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of input object.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:DevLib.Data.Repository.XmlFileRepository`1">
            <summary>
            Xml file repository.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:DevLib.Data.Repository.XmlFileRepository`1.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.Repository.XmlFileRepository`1" /> class.
            </summary>
            <param name="filename">The filename.</param>
            <param name="removeDefaultNamespace">Whether to write default namespace.</param>
        </member>
        <member name="T:DevLib.Data.DbHelper">
            <summary>
            Represents a database that commands can be run against.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbHelper.DbProviderDictionary">
            <summary>
            Field DbProviderDictionary.
            </summary>
        </member>
        <member name="M:DevLib.Data.DbHelper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:DevLib.Data.DbHelper" /> class.
            </summary>
        </member>
        <member name="M:DevLib.Data.DbHelper.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.DbHelper" /> class.
            </summary>
            <param name="connectionString">The string used to open the database connection.</param>
            <param name="providerName">Invariant name of a database provider.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.#ctor(System.String,DevLib.Data.DbProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DevLib.Data.DbHelper" /> class.
            </summary>
            <param name="connectionString">The string used to open the database connection.</param>
            <param name="provider">DbProvider enum value.</param>
        </member>
        <member name="P:DevLib.Data.DbHelper.DiscoverParametersAction">
            <summary>
            Gets or sets the discover parameters action.
            </summary>
        </member>
        <member name="P:DevLib.Data.DbHelper.GetXmlReaderFunc">
            <summary>
            Gets or sets the ExecuteXmlReader function.
            </summary>
        </member>
        <member name="P:DevLib.Data.DbHelper.ConnectionString">
            <summary>
            Gets the string used to open the database connection.
            </summary>
        </member>
        <member name="P:DevLib.Data.DbHelper.ProviderFactory">
            <summary>
            Gets the DbProviderFactory.
            </summary>
        </member>
        <member name="M:DevLib.Data.DbHelper.ToList``1(System.Data.Common.DbDataReader)">
            <summary>
            Convert DbDataReader result to generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="dbDataReader">DbDataReader instance.</param>
            <returns>A generic list containing the resultset.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.DiscoverParametersSql(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the System.Data.SqlClient.SqlCommand and populates the System.Data.SqlClient.SqlCommand.Parameters collection of the specified System.Data.SqlClient.SqlCommand object.
            </summary>
            <param name="command">The System.Data.SqlClient.SqlCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the System.Data.SqlClient.SqlCommand.Parameters collection of the System.Data.SqlClient.SqlCommand.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.DiscoverParametersOle(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the System.Data.OleDb.OleDbCommand and populates the System.Data.OleDb.OleDbCommand.Parameters collection of the specified System.Data.OleDb.OleDbCommand object.
            </summary>
            <param name="command">The System.Data.OleDb.OleDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the System.Data.OleDb.OleDbCommand.Parameters collection of the System.Data.OleDb.OleDbCommand.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.DiscoverParametersOdbc(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the System.Data.Odbc.OdbcCommand and populates the System.Data.Odbc.OdbcCommand.Parameters collection of the specified System.Data.Odbc.OdbcCommand object.
            </summary>
            <param name="command">The System.Data.Odbc.OdbcCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the System.Data.Odbc.OdbcCommand.Parameters collection of the System.Data.Odbc.OdbcCommand.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.DiscoverParametersOracle(System.Data.Common.DbCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified in the System.Data.OracleClient.OracleCommand and populates the System.Data.OracleClient.OracleCommand.Parameters collection of the specified System.Data.OracleClient.OracleCommand object.
            </summary>
            <param name="command">The System.Data.OracleClient.OracleCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the System.Data.OracleClient.OracleCommand.Parameters collection of the System.Data.OracleClient.OracleCommand.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.GetXmlReaderSql(System.Data.Common.DbCommand)">
            <summary>
            Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection and builds an System.Xml.XmlReader object.
            </summary>
            <param name="command">The Sql command.</param>
            <returns>An System.Xml.XmlReader object.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.OpenConnection(System.Boolean)">
            <summary>
            Open database connection.
            </summary>
            <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs.</param>
            <returns>DbConnection instance.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CloseConnection(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Close database connection.
            </summary>
            <param name="dbConnection">The database connection.</param>
            <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.BeginTransaction(System.Boolean)">
            <summary>
            Starts a database transaction.
            </summary>
            <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs.</param>
            <returns>An object representing the new transaction.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CommitTransaction(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Commits the database transaction.
            </summary>
            <param name="transaction">The transaction to commit.</param>
            <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.RollbackTransaction(System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <param name="transaction">The transaction to roll back.</param>
            <param name="throwOnError">true to throw any exception that occurs.-or- false to ignore any exception that occurs.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.PrepareCommand(System.Data.Common.DbTransaction,System.Data.Common.DbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
            Prepares the DbCommand object.
            </summary>
            <param name="transaction">A valid DbTransaction, or null.</param>
            <param name="connection">A valid DbConnection, on which to execute this command.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter to be associated with the command or 'null' if no parameters are required.</param>
            <returns>A new instance of DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.PrepareCommand(System.Data.Common.DbTransaction,System.Data.Common.DbConnection,System.String)">
            <summary>
            Prepares the DbCommand object.
            </summary>
            <param name="transaction">A valid DbTransaction, or null.</param>
            <param name="connection">A valid DbConnection, on which to execute this command.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <returns>A new instance of DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.PrepareCommandSp(System.Data.Common.DbTransaction,System.Data.Common.DbConnection,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Prepares the DbCommand object.
            </summary>
            <param name="transaction">A valid DbTransaction, or null.</param>
            <param name="connection">A valid DbConnection, on which to execute this command.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">Array of objects holding the values to be assigned.</param>
            <returns>A new instance of DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.PrepareCommandSpDataRowParams(System.Data.Common.DbTransaction,System.Data.Common.DbConnection,System.String,System.Data.DataRow)">
            <summary>
            Prepares the DbCommand object.
            </summary>
            <param name="transaction">A valid DbTransaction, or null.</param>
            <param name="connection">A valid DbConnection, on which to execute this command.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>A new instance of DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.PrepareCommandSpObjectParams(System.Data.Common.DbTransaction,System.Data.Common.DbConnection,System.String,System.Object)">
            <summary>
            Prepares the DbCommand object.
            </summary>
            <param name="transaction">A valid DbTransaction, or null.</param>
            <param name="connection">A valid DbConnection, on which to execute this command.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>A new instance of DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateCommand(System.Data.CommandType,System.String)">
            <summary>
            Returns a new instance of the provider's class that implements the System.Data.Common.DbCommand class.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <returns>A new instance of System.Data.Common.DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateCommand(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Returns a new instance of the provider's class that implements the System.Data.Common.DbCommand class.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A new instance of System.Data.Common.DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateCommand(System.String)">
            <summary>
            Returns a new instance of the provider's class that implements the System.Data.Common.DbCommand class.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <returns>A new instance of System.Data.Common.DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateCommandSp(System.String,System.String[])">
            <summary>
            Returns a new instance of the provider's class that implements the System.Data.Common.DbCommand class.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters.</param>
            <returns>A new instance of System.Data.Common.DbCommand.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateParameter">
            <summary>
            Returns a new instance of the provider's class that implements the System.Data.Common.DbParameter class.
            </summary>
            <returns>A new instance of System.Data.Common.DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateParameter(System.String,System.Object)">
            <summary>
            Returns a new instance of the provider's class that implements the System.Data.Common.DbParameter class.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value for the parameter.</param>
            <returns>A new instance of System.Data.Common.DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateObjectParams(System.Object,System.String)">
            <summary>
            Returns a list of the provider's class that implements the System.Data.Common.DbParameter class.
            </summary>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A list of System.Data.Common.DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateDataRowParams(System.Data.DataRow,System.String)">
            <summary>
            Returns a list of the provider's class that implements the System.Data.Common.DbParameter class.
            </summary>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A list of System.Data.Common.DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.DisposeCommand(System.Data.Common.DbCommand)">
            <summary>
            Disposes the command.
            </summary>
            <param name="dbCommand">The database command.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.FuncOnDb``1(System.Converter{System.Data.Common.DbConnection,System.Data.Common.DbCommand},System.Converter{System.Data.Common.DbCommand,``0},System.Boolean,System.Boolean)">
            <summary>
            Calls function on the database.
            </summary>
            <typeparam name="TResult">The type of return value.</typeparam>
            <param name="prepareCommandFunc">The prepare command function.</param>
            <param name="executeCommandFunc">The execute command function.</param>
            <param name="disposeCommand">true to dispose command when finished; otherwise, false.</param>
            <param name="disposeConnection">true to dispose connection when finished; otherwise, false.</param>
            <returns>Result of the function.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FuncOnDbTransaction``1(System.Data.Common.DbTransaction,System.Converter{System.Data.Common.DbConnection,System.Data.Common.DbCommand},System.Converter{System.Data.Common.DbCommand,``0},System.Boolean)">
            <summary>
            Calls function on the database with transaction.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="prepareCommandFunc">The prepare command function.</param>
            <param name="executeCommandFunc">The execute command function.</param>
            <param name="disposeCommand">true to dispose command when finished, otherwise, false.</param>
            <returns>Result of the function.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ActionOnDb(System.Converter{System.Data.Common.DbConnection,System.Data.Common.DbCommand},System.Action{System.Data.Common.DbCommand})">
            <summary>
            Calls action on the database.
            </summary>
            <param name="prepareCommandFunc">The prepare command function.</param>
            <param name="executeCommandAction">The execute command action.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.ActionOnDbTransaction(System.Data.Common.DbTransaction,System.Converter{System.Data.Common.DbConnection,System.Data.Common.DbCommand},System.Action{System.Data.Common.DbCommand})">
            <summary>
            Calls action on the database with transaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="prepareCommandFunc">The prepare command function.</param>
            <param name="executeCommandAction">The execute command action.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQueryText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQueryTextDataRowParams(System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQueryTextObjectParams(System.String,System.Object,System.String)">
            <summary>
            Executes a SQL statement against a connection object.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuerySp(System.String,System.Object[])">
            <summary>
            Executes a stored procedure against a connection object.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuerySpDataRowParams(System.String,System.Data.DataRow)">
            <summary>
            Executes a stored procedure against a connection object.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuerySpObjectParams(System.String,System.Object)">
            <summary>
            Executes a stored procedure against a connection object.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuery(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQueryText(System.Data.Common.DbTransaction,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes a SQL statement against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQueryTextDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes a SQL statement against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQueryTextObjectParams(System.Data.Common.DbTransaction,System.String,System.Object,System.String)">
            <summary>
            Executes a SQL statement against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuerySp(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes a stored procedure against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuerySpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Executes a stored procedure against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteNonQuerySpObjectParams(System.Data.Common.DbTransaction,System.String,System.Object)">
            <summary>
            Executes a stored procedure against the specified DbTransaction.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarTextDataRowParams(System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarTextObjectParams(System.String,System.Object,System.String)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarSp(System.String,System.Object[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarSpDataRowParams(System.String,System.Data.DataRow)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarSpObjectParams(System.String,System.Object)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalar(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarText(System.Data.Common.DbTransaction,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarTextDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarTextObjectParams(System.Data.Common.DbTransaction,System.String,System.Object,System.String)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarSp(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>The first column of the first row in the result set.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarSpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteScalarSpObjectParams(System.Data.Common.DbTransaction,System.String,System.Object)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSet(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetTextDataRowParams(System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetTextObjectParams(System.String,System.Object,System.String)">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetSp(System.String,System.Object[])">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetSpDataRowParams(System.String,System.Data.DataRow)">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetSpObjectParams(System.String,System.Object)">
            <summary>
            Executes the query and returns a DataSet.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetText(System.Data.Common.DbTransaction,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetTextDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetTextObjectParams(System.Data.Common.DbTransaction,System.String,System.Object,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetSp(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetSpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteDataSetSpObjectParams(System.Data.Common.DbTransaction,System.String,System.Object)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderTextDataRowParams(System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderTextObjectParams(System.String,System.Object,System.String)">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSp(System.String,System.Data.CommandBehavior,System.Object[])">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSp(System.String,System.Object[])">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpDataRowParams(System.String,System.Data.DataRow,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpDataRowParams(System.String,System.Data.DataRow)">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpObjectParams(System.String,System.Object,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpObjectParams(System.String,System.Object)">
            <summary>
            Executes the query and returns a DbDataReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderText(System.Data.Common.DbTransaction,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderTextDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderTextObjectParams(System.Data.Common.DbTransaction,System.String,System.Object,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSp(System.Data.Common.DbTransaction,System.String,System.Data.CommandBehavior,System.Object[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSp(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.Data.CommandBehavior)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpObjectParams(System.Data.Common.DbTransaction,System.String,System.Object,System.Data.CommandBehavior)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteReaderSpObjectParams(System.Data.Common.DbTransaction,System.String,System.Object)">
            <summary>
            Executes the query against the provided DbTransaction and returns a DbDataReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteList``1(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteList``1(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListText``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListTextDataRowParams``1(System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListTextObjectParams``1(System.String,System.Object,System.String)">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSp``1(System.String,System.Data.CommandBehavior,System.Object[])">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="spName">The name of the stored procedure.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSp``1(System.String,System.Object[])">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSpDataRowParams``1(System.String,System.Data.DataRow,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSpDataRowParams``1(System.String,System.Data.DataRow)">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSpObjectParams``1(System.String,System.Object,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSpObjectParams``1(System.String,System.Object)">
            <summary>
            Executes the query and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteList``1(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListText``1(System.Data.Common.DbTransaction,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListTextDataRowParams``1(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListTextObjectParams``1(System.Data.Common.DbTransaction,System.String,System.Object,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command.</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSp``1(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSpDataRowParams``1(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteListSpObjectParams``1(System.Data.Common.DbTransaction,System.String,System.Object)">
            <summary>
            Executes the query against the provided DbTransaction and returns a generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>A DbDataReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReader(System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO".</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderText(System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="commandText">The T-SQL command using "FOR XML AUTO".</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderTextDataRowParams(System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="commandText">The T-SQL command using "FOR XML AUTO".</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderTextObjectParams(System.String,System.Object,System.String)">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="commandText">The T-SQL command using "FOR XML AUTO".</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderSp(System.String,System.Object[])">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderSpDataRowParams(System.String,System.Data.DataRow)">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderSpObjectParams(System.String,System.Object)">
            <summary>
            Executes the query and returns an XmlReader.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReader(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO".</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderText(System.Data.Common.DbTransaction,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command using "FOR XML AUTO".</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderTextDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command using "FOR XML AUTO".</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderTextObjectParams(System.Data.Common.DbTransaction,System.String,System.Object,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The T-SQL command using "FOR XML AUTO".</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderSp(System.Data.Common.DbTransaction,System.String,System.Object[])">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderSpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.ExecuteXmlReaderSpObjectParams(System.Data.Common.DbTransaction,System.String,System.Object)">
            <summary>
            Executes the query against the provided DbTransaction and returns an XmlReader.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSet(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetText(System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetTextDataRowParams(System.String,System.Data.DataSet,System.String[],System.Data.DataRow,System.String)">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetTextObjectParams(System.String,System.Data.DataSet,System.String[],System.Object,System.String)">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetSp(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetSpDataRowParams(System.String,System.Data.DataSet,System.String[],System.Data.DataRow)">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetSpObjectParams(System.String,System.Data.DataSet,System.String[],System.Object)">
            <summary>
            Executes the query and adds or refreshes rows in the DataSet.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSet(System.Data.Common.DbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.).</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetText(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Data.Common.DbParameter[])">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="commandParameters">An array of DbParameter used to execute the command.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetTextDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Data.DataRow,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="dataRow">The DataRow used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetTextObjectParams(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object,System.String)">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="data">The object used to hold the parameter values.</param>
            <param name="parameterNameFormat">A composite format string for parameter name.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetSp(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetSpDataRowParams(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Data.DataRow)">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.FillDataSetSpObjectParams(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String[],System.Object)">
            <summary>
            Executes the query against the provided DbTransaction and adds or refreshes rows in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="dataSet">A dataset which will contain the resultset generated by the command.</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced by a user defined name (probably the actual table name).</param>
            <param name="data">The object used to hold the stored procedure's parameter values.</param>
            <returns>The number of rows successfully added to or refreshed in the DataSet. This does not include rows affected by statements that do not return rows.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.String,System.String,System.String,System.Data.DataSet)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="insertCommandText">A valid transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="deleteCommandText">A valid transact-SQL statement or stored procedure to delete records from the data source.</param>
            <param name="updateCommandText">A valid transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.String,System.String,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="insertCommandText">A valid transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="deleteCommandText">A valid transact-SQL statement or stored procedure to delete records from the data source.</param>
            <param name="updateCommandText">A valid transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <param name="tableName">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.String,System.Data.DataSet)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="selectCommandText">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="selectCommandText">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <param name="tableName">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.Data.Common.DbTransaction,System.String,System.String,System.String,System.Data.DataSet)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="insertCommandText">A valid transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="deleteCommandText">A valid transact-SQL statement or stored procedure to delete records from the data source.</param>
            <param name="updateCommandText">A valid transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.Data.Common.DbTransaction,System.String,System.String,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="insertCommandText">A valid transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="deleteCommandText">A valid transact-SQL statement or stored procedure to delete records from the data source.</param>
            <param name="updateCommandText">A valid transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <param name="tableName">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.Data.Common.DbTransaction,System.String,System.Data.DataSet)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="selectCommandText">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataSet(System.Data.Common.DbTransaction,System.String,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="selectCommandText">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
            <param name="dataSet">The DataSet used to update the data source.</param>
            <param name="tableName">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataTable(System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataTable.
            </summary>
            <param name="insertCommandText">A valid transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="deleteCommandText">A valid transact-SQL statement or stored procedure to delete records from the data source.</param>
            <param name="updateCommandText">A valid transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="dataTable">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataTable(System.String,System.Data.DataTable)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataTable.
            </summary>
            <param name="selectCommandText">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
            <param name="dataTable">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataTable(System.Data.Common.DbTransaction,System.String,System.String,System.String,System.Data.DataTable)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataTable.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="insertCommandText">A valid transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="deleteCommandText">A valid transact-SQL statement or stored procedure to delete records from the data source.</param>
            <param name="updateCommandText">A valid transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="dataTable">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.UpdateDataTable(System.Data.Common.DbTransaction,System.String,System.Data.DataTable)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataTable.
            </summary>
            <param name="transaction">A valid DbTransaction.</param>
            <param name="selectCommandText">A <see cref="T:System.String" /> that is a Transact-SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.SqlClient.SqlDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
            <param name="dataTable">The DataTable used to update the data source.</param>
            <returns>The number of rows successfully updated from the DataSet.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateObject``1(System.Data.Common.DbDataReader,System.Type)">
            <summary>
            Convert DbDataReader result to generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="dbDataReader">DbDataReader instance.</param>
            <param name="type">The element type.</param>
            <returns>A generic list containing the resultset.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.CreateValue``1(System.Data.Common.DbDataReader,System.Type)">
            <summary>
            Convert DbDataReader result to generic list.
            </summary>
            <typeparam name="T">The type of the element of the list.</typeparam>
            <param name="dbDataReader">DbDataReader instance.</param>
            <param name="type">The element type.</param>
            <returns>A generic list containing the resultset.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelper.AttachParameters(System.Data.Common.DbCommand,System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
            Attaches array of DbParameter to a DbCommand.
            This method will assign a value of DbNull to any parameter with a direction of InputOutput and a value of null.
            This behavior will prevent default values from being used, but this will be the less common case than an intended pure output parameter (derived as InputOutput) where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added.</param>
            <param name="commandParameters">An array of DbParameter to be added to command.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.AssignParameterValues(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.Data.DataRow)">
            <summary>
            Assigns dataRow column values to an array of DbParameter.
            </summary>
            <param name="commandParameters">Array of DbParameter to be assigned values.</param>
            <param name="dataRow">The DataRow used to hold the stored procedure's parameter values.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.AssignParameterValues(System.Collections.Generic.IList{System.Data.Common.DbParameter},System.Collections.Generic.IList{System.Object})">
            <summary>
            Assigns an array of values to an array of DbParameter.
            </summary>
            <param name="commandParameters">Array of DbParameter to be assigned values.</param>
            <param name="parameterValues">Array of objects holding the values to be assigned.</param>
        </member>
        <member name="M:DevLib.Data.DbHelper.CheckStringNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Method CheckStringNullOrWhiteSpace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The name of the parameter.</param>
        </member>
        <member name="T:DevLib.Data.DbHelperParameterCache">
            <summary>
            Provides functions to leverage a static cache of procedure parameters, and the ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="F:DevLib.Data.DbHelperParameterCache.ParamCache">
            <summary>
            Field ParamCache.
            </summary>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.Common.DbParameter[])">
            <summary>
            Add parameter array to the cache.
            </summary>
            <param name="connectionString">A valid connection string for a DbConnection.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <param name="commandParameters">An array of DbParameter to be cached.</param>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache.
            </summary>
            <param name="connectionString">A valid connection string for a DbConnection.</param>
            <param name="commandText">The stored procedure name or T-SQL command.</param>
            <returns>An array of DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.GetSpParameterSet(System.Data.Common.DbProviderFactory,System.Action{System.Data.Common.DbCommand},System.String,System.Boolean)">
            <summary>
            Retrieves the set of DbParameter appropriate for the stored procedure.
            </summary>
            <param name="dbProviderFactory">The database provider factory.</param>
            <param name="discoverParametersAction">The discover parameters action.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results.</param>
            <returns>An array of DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.GetSpParameterSet(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand},System.String,System.Boolean)">
            <summary>
            Retrieves the set of DbParameter appropriate for the stored procedure.
            </summary>
            <param name="connection">A valid DbConnection object.</param>
            <param name="discoverParametersAction">The discover parameters action.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results.</param>
            <returns>An array of DbParameter.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.DiscoverSpParameterSet(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand},System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of DbParameter for a stored procedure.
            </summary>
            <param name="connection">A valid DbConnection object.</param>
            <param name="discoverParametersAction">The discover parameters action.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter.</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.CloneParameters(System.Data.Common.DbParameter[])">
            <summary>
            Deep copy of cached DbParameter array.
            </summary>
            <param name="originalParameters">Original parameters.</param>
            <returns>A deep copy of original parameters.</returns>
        </member>
        <member name="M:DevLib.Data.DbHelperParameterCache.GetSpParameterSetInternal(System.Data.Common.DbConnection,System.Action{System.Data.Common.DbCommand},System.String,System.Boolean)">
            <summary>
            Retrieves the set of DbParameter appropriate for the stored procedure.
            </summary>
            <param name="connection">A valid DbConnection object.</param>
            <param name="discoverParametersAction">The discover parameters action.</param>
            <param name="spName">The name of the stored procedure.</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results.</param>
            <returns>An array of DbParameter.</returns>
        </member>
    </members>
</doc>
